import cv2
import numpy as np
from twilio.rest import Client


account_sid = 'AC695c9a246fa8a158199629802087a5a6'
auth_token = 'b082f7366f50c9c61444989eeb056764'
client = Client(account_sid, auth_token)

# Caminhos para os arquivos YOLO
caminho_weights = "/home/arthur/Documents/Vscode Python dump/fotos/yolov3.weights"
caminho_cfg = "/home/arthur/Documents/Vscode Python dump/fotos/yolov3.cfg"
caminho_classes = "/home/arthur/Documents/Vscode Python dump/fotos/coco.names"

# Carregar YOLO
net = cv2.dnn.readNet(caminho_weights, caminho_cfg)

# Carregar as classes
with open(caminho_classes, "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Carregar vídeo
video = cv2.VideoCapture("/home/arthur/Documents/Vscode Python dump/fotos/boi.mp4")

while True:
    # Ler o próximo frame do vídeo
    ret, frame = video.read()
    if not ret:
        break

    # Preprocessar o frame
    blob = cv2.dnn.blobFromImage(frame, 1/255, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)

    # Forward pass
    outs = net.forward(net.getUnconnectedOutLayersNames())

    # Inicializar listas
    boxes = []
    confidences = []
    class_ids = []

    # Análise das detecções
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:  # Limite de confiança
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                width = int(detection[2] * frame.shape[1])
                height = int(detection[3] * frame.shape[0])
                left = int(center_x - width / 2)
                top = int(center_y - height / 2)

                boxes.append([left, top, width, height])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Aplicar supressão de não-máximos
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Verificar se há detecções
    if len(indices) > 0:
        for i in indices.flatten():
            box = boxes[i]
            left, top, width, height = box
            label = classes[class_ids[i]]
            

            animais_permitidos = ["cat", "dog", "sheep", "pig", "horse"]
            # Condicionais para o tipo de detecção
            if label in animais_permitidos:  # Se for cavalo, não faz nada
                continue
            elif label in classes:  # Se for outro animal
                mensagem = client.messages.create(
                    body='ALERTA ANIMAL DESCONHECIDO',
                    from_='+15035582648',
                    to='+5516991349353'
                )
                print("Animal não identificado:", label)
            elif label == "person":  # Se for uma pessoa
                print("Pessoa não identificada")
            else:
                print("Classe desconhecida:", label)

            # Desenhar caixas delimitadoras e rótulos
            cv2.rectangle(frame, (left, top), (left + width, top + height), (0, 255, 0), 2)
            cv2.putText(frame, label, (left + 50, top + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Exibir o frame de saída
    cv2.imshow("Video", frame)
    if cv2.waitKey(1) == ord('q'):
        break

# Liberar recursos
video.release()
cv2.destroyAllWindows()
